// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package order

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonEf7cfe30DecodeDiploma1InternalAppServiceOrder(in *jlexer.Lexer, out *UserOrderList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(UserOrderList, 0, 1)
			} else {
				*out = UserOrderList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 UserOrder
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEf7cfe30EncodeDiploma1InternalAppServiceOrder(out *jwriter.Writer, in UserOrderList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v UserOrderList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEf7cfe30EncodeDiploma1InternalAppServiceOrder(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserOrderList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEf7cfe30EncodeDiploma1InternalAppServiceOrder(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserOrderList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEf7cfe30DecodeDiploma1InternalAppServiceOrder(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserOrderList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEf7cfe30DecodeDiploma1InternalAppServiceOrder(l, v)
}
func easyjsonEf7cfe30DecodeDiploma1InternalAppServiceOrder1(in *jlexer.Lexer, out *UserOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "number":
			out.Number = int(in.Int())
		case "uploaded_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedDate = nil
			} else {
				if out.CreatedDate == nil {
					out.CreatedDate = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedDate).UnmarshalJSON(data))
				}
			}
		case "status":
			out.Status = string(in.String())
		case "accrual":
			out.Accrual = float64(in.Float64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEf7cfe30EncodeDiploma1InternalAppServiceOrder1(out *jwriter.Writer, in UserOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Number))
	}
	{
		const prefix string = ",\"uploaded_at\":"
		out.RawString(prefix)
		if in.CreatedDate == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CreatedDate).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	if in.Accrual != 0 {
		const prefix string = ",\"accrual\":"
		out.RawString(prefix)
		out.Float64(float64(in.Accrual))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEf7cfe30EncodeDiploma1InternalAppServiceOrder1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEf7cfe30EncodeDiploma1InternalAppServiceOrder1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEf7cfe30DecodeDiploma1InternalAppServiceOrder1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEf7cfe30DecodeDiploma1InternalAppServiceOrder1(l, v)
}
